/* -*- mode: c; tabs: 4; -*- */
/*=============================================================================
**
**    Vix Technology                   Licensed software
**    (C) 2015                         All rights reserved
**
**=============================================================================
**
**  Project/Product : MBU
**  Filename        : BR_LLSC_4_20.c
**  Author(s)       : ???
**
**  ID              : BR_LLSC_4_20 - NTS0177 v8.1
**
**  Name            : Determine trip extension
**
**  Data Fields     :
**
**      1.  TAppTProduct.EndDateTime
**      2.  Dynamic.CurrentDateTime
**      3.  TAppControl.ProductInUse
**      4.  TAppTProduct.ProductControlBitmap
**      5.  Tariff.MaximiumTripTolerance
**      6.  Dynamic.EntryPointID
**      7.  TAppTproduct.LastUsageEntryPointID
**      8.  Static.TransportMode
**      9.  Static.ServiceProviderId
**      
**  Pre-Conditions  :
**
**      1.  The product in use(3) is set
**      2.  The product in use(3) is of type provisional as indicated by the
**          product control bitmap(4)
**      3.  The expiry datetime(1) of the product in use(3) is less than the
**          current date time(2) - the product is expired.
**      4.  If the mode of transport(8) of the current device is BUS or TRAM
**          and the entypoint Id(6) of the current device is equal to the
**          entry point of the provisional product or If the mode of transport(7)
**          of the both the provisional product service provider and the current
**          device is RAIL.
**      5.  The TripTolerance(5) for this devices configured service
**          provider(9) is not 0 (zero) .
**      6.  If the current product expiry(1) plus the TripTolerance(5) (in minutes)
**          is less than the current date time(2) -then the grace period has not
**          expired.
**
**  Description     :
**
**      1.  Perform a productUpdate/Extend on the Product in Use(3)
**          a.  Set the provisional expiry date time to the current Date time (2),
**              no further travel is permitted on this product
**
**  Post-Conditions :
**
**      1.  Consideration for Extra Ordinary long trips has been applied
**
**  Devices         :
**
**      Fare payment devices
**
**  Information     :
**   Compiler(s)    : C
**   Target(s)      : Independent
**
**  Subversion      :
**      $Id: $
**      $HeadURL: $
**
**  History         :
**   Vers.  Date        Aut.      Type     Description
**   -----  ----------  ----     -------  ---------------------------------------- 
**    1.00  18.12.15    MM.NTT   New      Updated to refect changes from NTS0177 7.3 to NTS0177 8.0
**    1.01  15.01.15    ANT      Modify   Rectified business rule
**
**===========================================================================*/

#include <cs.h>                 // For debug logging
#include <myki_cardservices.h>  // Myki Card Services
#include <LDT.h>                // Logical Device Transaction

#include "myki_br_rules.h"      // API for all BR_xxx modules
#include "BR_Common.h"          // Common utilities, macros, etc

/*==========================================================================*
**
**  BR_LLSC_4_20
**
**  Description     :
**      Implements business rule BR_LLSC_4_20.
**
**  Parameters      :
**      pData               [I/O]   BR context data
**
**  Returns         :
**      RULE_RESULT_EXECUTED
**      RULE_RESULT_BYPASSED
**      RULE_RESULT_ERROR
**
**  Notes          :
**
**==========================================================================*/

RuleResult_e BR_LLSC_4_20( MYKI_BR_ContextData_t *pData )
{
    MYKI_TAControl_t   *pMYKI_TAControl     = NULL;
    MYKI_Directory_t   *pDirectory          = NULL;
    MYKI_TAProduct_t   *pProduct            = NULL;
    int                 nResult             = 0;

    CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Start (Consideration of extra-ordinary trip tolerance)" );

    if ( ! pData )
    {
        CsErrx( "BR_LLSC_4_20 : Invalid argument(s)" );
        return  RULE_RESULT_ERROR;
    }

    if ( ( nResult = MYKI_CS_TAControlGet( &pMYKI_TAControl ) ) != MYKI_CS_OK )
    {
        CsErrx( "BR_LLSC_4_20 : MYKI_CS_TAControlGet() failed (%d)", nResult );
        return  RULE_RESULT_ERROR;
    }

    //--------------------------------------------------------------------------
    //  Pre-Conditions
    //  1 1. The product in use(3) is set
    if ( pMYKI_TAControl->ProductInUse == 0 )
    {
        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - No product in use" );
        pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 1, 0 );
        return  RULE_RESULT_BYPASSED;
    }

    //  2. The product in use(3) is of type provisional as indicated by the product control bitmap(4)

    if ( myki_br_GetCardProduct( pMYKI_TAControl->ProductInUse, &pDirectory, &pProduct ) < 0 )
    {
        CsErrx( "BR_LLSC_4_20 : myki_br_GetCardProduct(%d) failed", pMYKI_TAControl->ProductInUse );
        return  RULE_RESULT_ERROR;
    }

    if ( ( pProduct->ControlBitmap & TAPP_TPRODUCT_CONTROL_PROVISIONAL_BITMAP ) == 0 )
    {
        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - Product Provisional Bit not set" );
        pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 2, 0 );
        return  RULE_RESULT_BYPASSED;
    }

    //  3. The expiry datetime(1) of the product in use(3) is less than the current date time(2) - the product is expired.
  
    if ( pProduct->EndDateTime >= pData->DynamicData.currentDateTime )
    {
        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - TAProduct.EndDateTime (%d) >= Current date/time (%d)",
                pProduct->EndDateTime, pData->DynamicData.currentDateTime );
        pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 3, 0 );
        return  RULE_RESULT_BYPASSED;
    }

    //  4. If the mode of transport(8) of the current device is BUS or TRAM 
    //       and the entypoint Id(6) of the current device is equal to the entry point of the provisional product
    if ( pData->InternalData.TransportMode == TRANSPORT_MODE_BUS  ||
         pData->InternalData.TransportMode == TRANSPORT_MODE_TRAM )
    {
        if ( pProduct->LastUsage.Location.EntryPointId != pData->DynamicData.entryPointId )
        {
            CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - %s transport mode and Scan-on (%d) and Scan-off (%d) entry points are different", 
                    myki_br_GetTransportModeString( pData->InternalData.TransportMode ),
                    pProduct->LastUsage.Location.EntryPointId, pData->DynamicData.entryPointId );
            pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 4, 1 );
            return  RULE_RESULT_BYPASSED;
        }

        if ( pProduct->LastUsage.ProviderId != pData->StaticData.serviceProviderId )
        {
            CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - Scan-on (%d) and Scan-off (%d) service providers are different", 
                    pProduct->LastUsage.ProviderId, pData->StaticData.serviceProviderId );
            pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 4, 2 );
            return  RULE_RESULT_BYPASSED;
        }
    }
    //     or If the mode of transport(7) of the both the provisional product service provider and the current device is RAIL.
    else
    if ( pData->InternalData.TransportMode == TRANSPORT_MODE_RAIL )
    {
        TransportMode_e LastUsageTransportMode  = myki_br_cd_GetTransportModeForProvider( pProduct->LastUsage.ProviderId );
        if ( LastUsageTransportMode != TRANSPORT_MODE_RAIL )
        {
            CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - Scan-on @ %d/%s and Scan-off @ RAIL",
                    pProduct->LastUsage.ProviderId, myki_br_GetTransportModeString( LastUsageTransportMode ) );
            pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 4, 3 );
            return  RULE_RESULT_BYPASSED;
        }
    }
    else
    {
        CsErrx( "BR_LLSC_4_20 : Invalid transport mode (%d)", (int)pData->InternalData.TransportMode );
        return  RULE_RESULT_ERROR;
    }

    //  5. The TripTolerance(5) for this device is configured service provider(9) is not 0 (zero) .
  
    if ( pData->Tariff.maximumTripTolerance == 0 )
    {
        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - MaximumTripTolerance (%d) == 0", pData->Tariff.maximumTripTolerance);
        pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 5, 0 );
        return  RULE_RESULT_BYPASSED;
    }

    //  6.  If the current product expiry(1) plus the TripTolerance(5) (in minutes) is [less] greater than
    //      the current date time(2) -then the grace period has not expired.

    CsDbg( BRLL_RULE, "BR_LLSC_4_20 : TAProduct.EndDateTime=%d, MaximumTripTolerance=%d, CurrentDateTime=%d",
            pProduct->EndDateTime, pData->Tariff.maximumTripTolerance, pData->DynamicData.currentDateTime);
    if ( ( pProduct->EndDateTime + MINUTES_TO_SECONDS( (Time_t)pData->Tariff.maximumTripTolerance ) ) <= pData->DynamicData.currentDateTime )
    {
        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Bypass - TAProduct.EndDateTime (%d) + MaximumTripTolerance (%d) <= Current date/time (%d)",
                pProduct->EndDateTime, pData->Tariff.maximumTripTolerance, pData->DynamicData.currentDateTime);
        pData->ReturnedData.bypassCode  = BYPASS_CODE( 4, 20, 6, 0 );
        return  RULE_RESULT_BYPASSED;
    }
                        

    //--------------------------------------------------------------------------
    // Actions
    //
    {
        if ( myki_br_ldt_ProductUpdate_ExtendExpiryDateTime( pData, pDirectory, pData->DynamicData.currentDateTime, TRUE ) < 0 )
        {
            CsErrx( "BR_LLSC_4_20 : myki_br_ldt_ProductUpdate_ExtendExpiryDateTime() failed" );
            return  RULE_RESULT_ERROR;
        }

        CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Provisional expiry extended %d", pData->DynamicData.currentDateTime );
    }

    CsDbg( BRLL_RULE, "BR_LLSC_4_20 : Executed" );
    return  RULE_RESULT_EXECUTED;
}
