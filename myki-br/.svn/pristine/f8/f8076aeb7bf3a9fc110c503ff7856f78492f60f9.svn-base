/* -*- mode: c; tabs: 4; -*- */
/*=============================================================================
**
**    Vix Technology                   Licensed software
**    (C) 2015                         All rights reserved
**
**=============================================================================
**
**  Project/Product : MBU
**  Filename        : test_SEQ_OSC_Pin.c
**  Author(s)       : An Tran
**
**  Description     :
**      Implements Validate/Update PIN sequence unit-tests.
**
**  Function(s)     :
**      test_SEQ_OSC_ValidatePin    [Public]    unit-test functions
**
**  Information     :
**   Compiler(s)    : ANSI C
**   Target(s)      : Independent
**
**  Subversion      :
**      $Id$
**      $HeadURL$
**
**  History         :
**   Vers.  Date        Aut.  Type     Description
**   -----  ----------  ----  -------  ----------------------------------------
**    1.00  28.05.15    ANT   Create
**
**===========================================================================*/

/*
 *      Options
 *      -------
 */

/*
 *      Includes
 *      --------
 */

#include    <string.h>
#include    <cs.h>
#include    <myki_cardservices.h>
#include    <myki_cdd_enums.h>
#include    <myki_br.h>
#include    <myki_br_rules.h>
#include    <myki_br_context_data.h>

#include    "test_common.h"

/*==========================================================================*
**
**  test_SEQ_OSC_ValidatePin_001
**
**  Description     :
**      Valid PIN unit-test.
**
**  Parameters      :
**      pData           [I/O]   BR context data
**
**  Returns         :
**      TRUE                    test passed
**      FALSE                   test failed
**
**  Notes           :
**
**
**==========================================================================*/

int test_SEQ_OSC_ValidatePin_001( MYKI_BR_ContextData_t *pData )
{
    MYKI_CAControl_t               *pMYKI_CAControl             = NULL;
    MYKI_CAIssuer_t                *pMYKI_CAIssuer              = NULL;
    MYKI_OAControl_t               *pMYKI_OAControl             = NULL;
    MYKI_OAPIN_t                   *pMYKI_OAPIN                 = NULL;
    MYKI_OARoles_t                 *pMYKI_OARoles               = NULL;
    MYKI_OAShiftDataControl_t      *pMYKI_OAShiftDataControl    = NULL;
    MYKI_OAShiftDataRecordList_t   *pMYKI_OAShiftDataRecordList = NULL;
    int                             EntryPointId                = 53;
    int                             LineId                      = 66;
    int                             StopId                      = 79;
    int                             ServiceProviderId           = 100;
    int                             MaxPinRetries               = 10;
    int                             InvalidPinCount             = 5;
    char                           *OperatorPin                 = "12345678";
    MYKI_BR_ShiftData_t             MYKI_BR_ShiftData           = { 0 };
    U8_t                            RoleType_Driver             = 1;
    U8_t                            RoleProfile_Driver          = 2;
    int                             NumberOfHoursBetweenShifts  = 12;
    int                             MaxShiftDownTime            = 2;
    int                             ShiftId_Low                 = 761;
    int                             ShiftId_High                = 912;
    int                             ShiftId                     = ( ( ShiftId_High << 16 ) | ShiftId_Low );
    Time_t                          ShiftStartTime              = pData->DynamicData.currentDateTime - HOURS_TO_SECONDS( 3 );
    Time_t                          ShiftEndTime                = pData->DynamicData.currentDateTime - HOURS_TO_SECONDS( 1 );
    int                             SalesCountCash              = 3;
    int                             SalesValueCash              = 1300;
    int                             ReversalsCountCash          = 2;
    int                             ReversalsValueCash          = 760;
    int                             SalesCountTPurse            = 8;
    int                             SalesValueTPurse            = 980;
    int                             ReversalsCountTPurse        = 4;
    int                             ReversalsValueTPurse        = 320;
    BusinessRulesResult_e           RuleResult                  = MYKI_BR_RESULT_ERROR;

    if ( pData == NULL ||
         MYKI_CS_OpenCard( MYKI_CS_OPEN_OPERATOR_APP, NULL /*DONTCARE*/     ) != MYKI_CS_OK ||
         MYKI_CS_CAControlGet(              &pMYKI_CAControl                ) != MYKI_CS_OK ||
         MYKI_CS_CAIssuerGet(               &pMYKI_CAIssuer                 ) != MYKI_CS_OK ||
         MYKI_CS_OAControlGet(              &pMYKI_OAControl                ) != MYKI_CS_OK ||
         MYKI_CS_OAPINGet(                  &pMYKI_OAPIN                    ) != MYKI_CS_OK ||
         MYKI_CS_OARolesGet(                &pMYKI_OARoles                  ) != MYKI_CS_OK ||
         MYKI_CS_OAShiftDataControlGet(     &pMYKI_OAShiftDataControl       ) != MYKI_CS_OK ||
         MYKI_CS_OAShiftDataRecordsGet( 0,  &pMYKI_OAShiftDataRecordList    ) != MYKI_CS_OK )
    {
        return FALSE;
    }

    /*  GIVEN */
    {
        /*  Card image */
        {
            pMYKI_CAControl->Status                                                 = CARD_CONTROL_STATUS_ACTIVATED;
            pMYKI_CAControl->ExpiryDate                                             = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 2 );
            pMYKI_CAIssuer->OperationMode                                           = 0;
            pMYKI_OAControl->Status                                                 = OAPP_CONTROL_STATUS_ACTIVATED;
            pMYKI_OAControl->BlockingReason                                         = OAPP_CONTROL_BLOCKING_REASON_RESERVED;
            pMYKI_OAControl->ExpiryDate                                             = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 1 );
            pMYKI_OAControl->StaffProviderId                                        = ServiceProviderId;
            pMYKI_OAControl->InvalidPinCount                                        = InvalidPinCount;
            pMYKI_OAControl->RolesCount                                             = 1;
            memcpy( pMYKI_OAPIN->Pin, OperatorPin, sizeof( pMYKI_OAPIN->Pin ) );
            pMYKI_OARoles->Role[ 0 ].Type                                           = RoleType_Driver;
            pMYKI_OARoles->Role[ 0 ].Profile                                        = RoleProfile_Driver;
            pMYKI_OAShiftDataControl->Status                                        = OAPP_SHIFT_DATA_STATUS_SUSPENDED;
            pMYKI_OAShiftDataControl->ActiveRecordCount                             = 2;
            pMYKI_OAShiftDataControl->ShiftId                                       = ShiftId_Low;
            pMYKI_OAShiftDataControl->ShiftSeqNo                                    = ShiftId_High;
            pMYKI_OAShiftDataControl->StartTime                                     = ShiftStartTime;
            pMYKI_OAShiftDataControl->CloseTime                                     = ShiftEndTime;
            pMYKI_OAShiftDataRecordList->NumberOfRecords                            = 2;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].RecordType       = PAYMENT_METHOD_CASH;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].SalesCount       = SalesCountCash;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].SalesValue       = SalesValueCash;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].ReversalsCount   = ReversalsCountCash;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].ReversalsValue   = ReversalsValueCash;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].RecordType       = PAYMENT_METHOD_TPURSE;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].SalesCount       = SalesCountTPurse;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].SalesValue       = SalesValueTPurse;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].ReversalsCount   = ReversalsCountTPurse;
            pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].ReversalsValue   = ReversalsValueTPurse;
        }

        /*  BR context data */
        {
            pData->DynamicData.entryPointId                                         = EntryPointId;
            pData->DynamicData.lineId                                               = LineId;
            pData->DynamicData.stopId                                               = StopId;
            pData->DynamicData.isOperator                                           = TRUE;
            pData->DynamicData.pShiftData                                           = &MYKI_BR_ShiftData;

            pData->StaticData.serviceProviderId                                     = ServiceProviderId;
            pData->StaticData.maxPinRetries                                         = MaxPinRetries;
            memset( pData->StaticData.staffRoles, 0, sizeof( pData->StaticData.staffRoles ) );
            pData->StaticData.staffRoles[ 0 ].type                                  = RoleType_Driver;
            pData->StaticData.staffRoles[ 0 ].profile                               = RoleProfile_Driver;
            pData->StaticData.staffRoles[ 0 ].operatorType                          = OperatorType_DRIVER;
            pData->StaticData.numberOfHoursBetweenShifts                            = NumberOfHoursBetweenShifts;
            pData->StaticData.maxShiftDownTime                                      = MaxShiftDownTime;
        }
    }

    /*  WHEN */
    {
        /*  Valid PIN entered */
        {
            memcpy( pData->DynamicData.operatorPin, OperatorPin, sizeof( pData->DynamicData.operatorPin ) );
        }

        /*  Executes business sequence */
        RuleResult  = (BusinessRulesResult_e)MYKI_BR_ExecuteSequence( pData, SEQ_FUNCTION_VALIDATE_PIN );
    }

    /*  THEN */
    {
        UT_Start( );

        /*  Make sure business rule is bypassed */
        UT_Assert( RuleResult == MYKI_BR_RESULT_SUCCESS );

        /*  Make sure card image is correctly updated */
        UT_Assert( pMYKI_OAControl->InvalidPinCount == 0 );
        UT_Assert( pMYKI_OAShiftDataControl->Status == OAPP_SHIFT_DATA_STATUS_ACTIVATED );
        UT_Assert( pMYKI_OAShiftDataControl->ActiveRecordCount == 2 );
        UT_Assert( pMYKI_OAShiftDataControl->ShiftId == ShiftId_Low );
        UT_Assert( pMYKI_OAShiftDataControl->ShiftSeqNo == ShiftId_High );
        UT_Assert( pMYKI_OAShiftDataControl->StartTime == ShiftStartTime );
        UT_Assert( pMYKI_OAShiftDataControl->CloseTime == TIME_NOT_SET );
        UT_Assert( pMYKI_OAShiftDataRecordList->NumberOfRecords == 2 );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].RecordType == PAYMENT_METHOD_CASH );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].SalesCount == SalesCountCash );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].SalesValue == SalesValueCash );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].ReversalsCount == ReversalsCountCash );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 0 ].ReversalsValue == ReversalsValueCash );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].RecordType == PAYMENT_METHOD_TPURSE );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].SalesCount == SalesCountTPurse );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].SalesValue == SalesValueTPurse );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].ReversalsCount == ReversalsCountTPurse );
        UT_Assert( pMYKI_OAShiftDataRecordList->MYKI_ShiftDataRecord[ 1 ].ReversalsValue == ReversalsValueTPurse );

        /*  Make sure accept/reject code is correct */
        UT_Assert( pData->ReturnedData.rejectReason == MYKI_BR_REJECT_REASON_NOT_APPLICABLE );
        UT_Assert( pData->ReturnedData.acceptReason == MYKI_BR_ACCEPT_REASON_NOT_APPLICABLE );

        /*  Make sure returned shift data is correct */
        UT_Assert( MYKI_BR_ShiftData.shiftStatus == OAPP_SHIFT_DATA_STATUS_ACTIVATED );
        UT_Assert( MYKI_BR_ShiftData.shiftId == ShiftId );
        UT_Assert( MYKI_BR_ShiftData.shiftStartTime == ShiftStartTime );
        UT_Assert( MYKI_BR_ShiftData.shiftEndTime == TIME_NOT_SET );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_TPURSE ].RecordType == PAYMENT_METHOD_TPURSE );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_TPURSE ].SalesCount == SalesCountTPurse );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_TPURSE ].SalesValue == SalesValueTPurse );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_TPURSE ].ReversalsCount == ReversalsCountTPurse );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_TPURSE ].ReversalsValue == ReversalsValueTPurse );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_CASH   ].RecordType == PAYMENT_METHOD_CASH );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_CASH   ].SalesCount == SalesCountCash );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_CASH   ].SalesValue == SalesValueCash );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_CASH   ].ReversalsCount == ReversalsCountCash );
        UT_Assert( MYKI_BR_ShiftData.shiftTotals[ PAYMENT_METHOD_CASH   ].ReversalsValue == ReversalsValueCash );
        UT_Assert( MYKI_BR_ShiftData.shiftPortionStatus == SHIFT_PORTION_BROUGHT_FORWARD );

        return  UT_Result( );
    }
}   /*  test_SEQ_OSC_ValidatePin_001( ) */

/*==========================================================================*
**
**  test_SEQ_OSC_ValidatePin_002
**
**  Description     :
**      Invalid PIN unit-test.
**
**  Parameters      :
**      pData           [I/O]   BR context data
**
**  Returns         :
**      TRUE                    test passed
**      FALSE                   test failed
**
**  Notes           :
**
**
**==========================================================================*/

int test_SEQ_OSC_ValidatePin_002( MYKI_BR_ContextData_t *pData )
{
    MYKI_CAControl_t       *pMYKI_CAControl         = NULL;
    MYKI_CAIssuer_t        *pMYKI_CAIssuer          = NULL;
    MYKI_OAControl_t       *pMYKI_OAControl         = NULL;
    MYKI_OAPIN_t           *pMYKI_OAPIN             = NULL;
    int                     EntryPointId            = 53;
    int                     LineId                  = 66;
    int                     StopId                  = 79;
    int                     ServiceProviderId       = 100;
    int                     MaxPinRetries           = 10;
    char                   *OperatorPin             = "12345678";
    BusinessRulesResult_e   RuleResult              = MYKI_BR_RESULT_ERROR;

    if ( pData == NULL ||
         MYKI_CS_CAControlGet(  &pMYKI_CAControl    ) != MYKI_CS_OK ||
         MYKI_CS_CAIssuerGet(   &pMYKI_CAIssuer     ) != MYKI_CS_OK ||
         MYKI_CS_OAControlGet(  &pMYKI_OAControl    ) != MYKI_CS_OK ||
         MYKI_CS_OAPINGet(      &pMYKI_OAPIN        ) != MYKI_CS_OK )
    {
        return FALSE;
    }

    /*  GIVEN */
    {
        /*  Card image */
        {
            pMYKI_CAControl->Status                                         = CARD_CONTROL_STATUS_ACTIVATED;
            pMYKI_CAControl->ExpiryDate                                     = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 2 );
            pMYKI_CAIssuer->OperationMode                                   = 0;
            pMYKI_OAControl->Status                                         = OAPP_CONTROL_STATUS_ACTIVATED;
            pMYKI_OAControl->ExpiryDate                                     = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 1 );
            pMYKI_OAControl->BlockingReason                                 = OAPP_CONTROL_BLOCKING_REASON_RESERVED;
            pMYKI_OAControl->StaffProviderId                                = ServiceProviderId;
            pMYKI_OAControl->InvalidPinCount                                = MaxPinRetries - 1;    /*  Last chance entering PIN */
            memcpy( pMYKI_OAPIN->Pin, OperatorPin, sizeof( pMYKI_OAPIN->Pin ) );
        }

        /*  BR context data */
        {
            pData->DynamicData.entryPointId                                 = EntryPointId;
            pData->DynamicData.lineId                                       = LineId;
            pData->DynamicData.stopId                                       = StopId;
            pData->DynamicData.isOperator                                   = TRUE;

            pData->StaticData.serviceProviderId                             = ServiceProviderId;
            pData->StaticData.maxPinRetries                                 = MaxPinRetries;
        }
    }

    /*  WHEN */
    {
        /*  Invalid PIN entered */
        {
            memcpy( pData->DynamicData.operatorPin, "99999999", sizeof( pData->DynamicData.operatorPin ) );
        }

        /*  Executes business sequence */
        RuleResult  = (BusinessRulesResult_e)MYKI_BR_ExecuteSequence( pData, SEQ_FUNCTION_VALIDATE_PIN );
    }

    /*  THEN */
    {
        UT_Start( );

        /*  Make sure business rule is bypassed */
        UT_Assert( RuleResult == MYKI_BR_RESULT_REJECT );

        /*  Make sure card image is correctly updated */
        UT_Assert( pMYKI_OAControl->Status == OAPP_CONTROL_STATUS_BLOCKED );
        UT_Assert( pMYKI_OAControl->BlockingReason == OAPP_CONTROL_BLOCKING_REASON_INVALID_PIN );
        UT_Assert( pMYKI_OAControl->InvalidPinCount == MaxPinRetries );

        /*  Make sure accept/reject code is correct */
        UT_Assert( pData->ReturnedData.rejectReason == MYKI_BR_REJECT_REASON_MAX_PIN_RETRIES_EXCEEDED );
        UT_Assert( pData->ReturnedData.acceptReason == MYKI_BR_ACCEPT_REASON_NOT_APPLICABLE );

        return  UT_Result( );
    }
}   /*  test_SEQ_OSC_ValidatePin_002( ) */

/*==========================================================================*
**
**  test_SEQ_OSC_UpdatePin_001
**
**  Description     :
**      Update PIN unit-test.
**
**  Parameters      :
**      pData           [I/O]   BR context data
**
**  Returns         :
**      TRUE                    test passed
**      FALSE                   test failed
**
**  Notes           :
**
**
**==========================================================================*/

int test_SEQ_OSC_UpdatePin_001( MYKI_BR_ContextData_t *pData )
{
    MYKI_CAControl_t       *pMYKI_CAControl         = NULL;
    MYKI_CAIssuer_t        *pMYKI_CAIssuer          = NULL;
    MYKI_OAControl_t       *pMYKI_OAControl         = NULL;
    MYKI_OAPIN_t           *pMYKI_OAPIN             = NULL;
    int                     EntryPointId            = 53;
    int                     LineId                  = 66;
    int                     StopId                  = 79;
    int                     ServiceProviderId       = 100;
    int                     MaxPinRetries           = 10;
    int                     InvalidPinCount         = MaxPinRetries;
    char                   *OperatorPin             = "12345678";
    char                   *NewOperatorPin          = "87654321";
    BusinessRulesResult_e   RuleResult              = MYKI_BR_RESULT_ERROR;

    if ( pData == NULL ||
         MYKI_CS_CAControlGet(  &pMYKI_CAControl    ) != MYKI_CS_OK ||
         MYKI_CS_CAIssuerGet(   &pMYKI_CAIssuer     ) != MYKI_CS_OK ||
         MYKI_CS_OAControlGet(  &pMYKI_OAControl    ) != MYKI_CS_OK ||
         MYKI_CS_OAPINGet(      &pMYKI_OAPIN        ) != MYKI_CS_OK )
    {
        return FALSE;
    }

    /*  GIVEN */
    {
        /*  Card image */
        {
            pMYKI_CAControl->Status                                         = CARD_CONTROL_STATUS_ACTIVATED;
            pMYKI_CAControl->ExpiryDate                                     = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 2 );
            pMYKI_CAIssuer->OperationMode                                   = 0;
            pMYKI_OAControl->Status                                         = OAPP_CONTROL_STATUS_BLOCKED;
            pMYKI_OAControl->BlockingReason                                 = OAPP_CONTROL_BLOCKING_REASON_INVALID_PIN;
            pMYKI_OAControl->ExpiryDate                                     = pData->DynamicData.currentBusinessDate + DAYS_TO_SECONDS( 1 );
            pMYKI_OAControl->StaffProviderId                                = ServiceProviderId;
            pMYKI_OAControl->InvalidPinCount                                = InvalidPinCount;
            memcpy( pMYKI_OAPIN->Pin, OperatorPin, sizeof( pMYKI_OAPIN->Pin ) );
        }

        /*  BR context data */
        {
            pData->DynamicData.entryPointId                                 = EntryPointId;
            pData->DynamicData.lineId                                       = LineId;
            pData->DynamicData.stopId                                       = StopId;
            pData->DynamicData.isOperator                                   = TRUE;

            pData->StaticData.serviceProviderId                             = ServiceProviderId;
            pData->StaticData.maxPinRetries                                 = MaxPinRetries;
        }
    }

    /*  WHEN */
    {
        /*  New PIN entered */
        {
            memcpy( pData->DynamicData.operatorPin, NewOperatorPin, sizeof( pData->DynamicData.operatorPin ) );
        }

        /*  Executes business sequence */
        RuleResult  = (BusinessRulesResult_e)MYKI_BR_ExecuteSequence( pData, SEQ_FUNCTION_UPDATE_PIN );
    }

    /*  THEN */
    {
        UT_Start( );

        /*  Make sure business rule is bypassed */
        UT_Assert( RuleResult == MYKI_BR_RESULT_SUCCESS );

        /*  Make sure card image is correctly updated */
        UT_Assert( memcmp( pData->DynamicData.operatorPin, NewOperatorPin, sizeof( pData->DynamicData.operatorPin ) ) == 0 );
        UT_Assert( pMYKI_OAControl->Status == OAPP_CONTROL_STATUS_ACTIVATED );
        UT_Assert( pMYKI_OAControl->BlockingReason == OAPP_CONTROL_BLOCKING_REASON_RESERVED );
        UT_Assert( pMYKI_OAControl->InvalidPinCount == 0 );

        /*  Make sure accept/reject code is correct */
        UT_Assert( pData->ReturnedData.rejectReason == MYKI_BR_REJECT_REASON_NOT_APPLICABLE );
        UT_Assert( pData->ReturnedData.acceptReason == MYKI_BR_ACCEPT_REASON_NOT_APPLICABLE );

        return  UT_Result( );
    }
}   /* test_SEQ_OSC_UpdatePin_001( ) */
