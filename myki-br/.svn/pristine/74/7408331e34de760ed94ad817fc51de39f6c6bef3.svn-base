/* -*- mode: c; tabs: 4; -*- */
/*=============================================================================
**
**    Vix Technology                   Licensed software
**    (C) 2015                         All rights reserved
**
**=============================================================================
**
**  Project/Product : NGBU
**  Filename        : BR_VIX_LLSC_21_2.c
**  Author(s)       : An Tran
**
**  Description     :
**  ID              : BR_VIX_LLSC_20_2
**
**  Name            : T-Purse Deduct Value Reversal
**
**  Data Fields     :
**
**      1.  TAppTPurseBalance.Balance
**      2.  StaticData.ServiceProviderId
**      3.  Tariff.MaximumTPurseBalance
**      4.  DynamicData.LineID
**      5.  DynamicData.EntryPointID
**      6.  DynamicData.StopID
**      7.  DynamicData.TPurseDebitAmount
**
**  Pre-Conditions  :
**
**      1.  TPurse debit reversal amount (6) is greater than 0.
**      2.  The sum of TPurse debit reversal amount (6) and TPurse balance (1) is
**          less than or equal to the maximum TPurse balance (3) allowed.
**
**  Description     :
**
**      1.  Perform TPurseUsage/Reverse transaction:
**          a.  Increment TPurse balance (1) by the TPurse debit reversal amount (6).
**      2.  Create load log:
**          a.  Definition:
**              i.  If the transaction type is not set then
**                  1.  Set the transaction type to Refund Value (4),
**                  2.  Else set the transaction type to Multiple Actionlists (21).
**              ii. Determine usage log control bit map through look up of the transaction usage type,
**              iii.Set ProviderID to service provider id (3),
**              iv. Set location to current location.
**          b.  Value:
**              i.  Set Dynamic.LoadTxValue to Dynamic.LoadTxValue + the debit reversal amount (7),
**              ii. If the Dynamic.LoadTxValue is less than zero,
**                  1.  Set the LoadLog.TxnValue to zero,
**                  2.  Else set the LoadLog.TxnValue to Dynamic.LoadTxnValue.
**              ii. Set new TPurse balance to TPurse balance after crediting,
**              iii.Set payment method to TPurse (1).
**          c.  Product:
**
**  Post-Conditions :
**
**      1.  Debit reversal amount is credited to TPurse balance.
**
**  Member(s)       :
**      BR_VIX_LLSC_21_2        [public]    business rule
**
**  Information     :
**   Compiler(s)    : C++
**   Target(s)      : Independent
**
**  Subversion      :
**      $Id: $
**      $HeadURL: $
**
**  History         :
**   Vers.  Date        Aut.  Type     Description
**   -----  ----------  ----  -------  ----------------------------------------
**    1.00  30.12.15    ANT   Create
**
**===========================================================================*/

/*
 *      Options
 *      -------
 */

/*
 *      Includes
 *      --------
 */

#include <cs.h>
#include <myki_cardservices.h>
#include <LDT.h>
#include "myki_br_rules.h"
#include "BR_Common.h"

/*
 *      Local Constants and Macros
 *      --------------------------
 */

/*
 *      Local Variables
 *      ---------------
 */

/*
 *      Global Variables
 *      ----------------
 */

/*==========================================================================*
**
**  BR_VIX_LLSC_21_2
**
**  Description     :
**      Implements business rule BR_VIX_LLSC_21_2.
**
**  Parameters      :
**      pData               [I/O]   BR context data
**
**  Returns         :
**      RULE_RESULT_EXECUTED
**      RULE_RESULT_BYPASSED
**      RULE_RESULT_ERROR
**
**  Notes           :
**
**
**==========================================================================*/

RuleResult_e    BR_VIX_LLSC_21_2( MYKI_BR_ContextData_t *pData )
{
    MYKI_TAControl_t               *pMYKI_TAControl             = NULL;
    MYKI_TAPurseBalance_t          *pMYKI_TAPurseBalance        = NULL;
    MYKI_TAPurseControl_t          *pMYKI_TAPurseControl        = NULL;
    TAppLoadLog_t                  *pTAppLoadLog                = NULL;
    int                             nResult                     = 0;

    CsDbg( BRLL_RULE, "BR_VIX_LLSC_21_2 : Start (T-Purse Deduct Value Reversal)" );

    if ( pData == NULL )
    {
        CsErrx( "BR_VIX_LLSC_21_2 : Invalid argument(s)" );
        return  RULE_RESULT_ERROR;
    }

    if ( ( nResult = MYKI_CS_TAControlGet( &pMYKI_TAControl ) ) < 0 )
    {
        CsErrx( "BR_VIX_LLSC_21_2 : MYKI_CS_TAControlGet() failed (%d)", nResult );
        return  RULE_RESULT_ERROR;
    }

    if ( ( nResult = MYKI_CS_TAPurseBalanceGet( &pMYKI_TAPurseBalance ) ) < 0 )
    {
        CsErrx( "BR_VIX_LLSC_21_2 : MYKI_CS_TAPurseBalanceGet() failed (%d)", nResult );
        return  RULE_RESULT_ERROR;
    }

    if ( ( nResult = MYKI_CS_TAPurseControlGet( &pMYKI_TAPurseControl ) ) < 0 )
    {
        CsErrx( "BR_VIX_LLSC_21_2 : MYKI_CS_TAPurseControlGet() failed (%d)", nResult );
        return  RULE_RESULT_ERROR;
    }

    /*  PRE-CONDITIONS */
    {
        /*  1.  TPurse debit reversal amount (6) is greater than 0. */
        if ( pData->DynamicData.tPurseDebitAmount <= 0 )
        {
            CsDbg( BRLL_RULE, "BR_VIX_LLSC_21_2 : invalid TPurse debit reversal amount (%d)",
                    pData->DynamicData.tPurseDebitAmount );
            pData->ReturnedData.bypassCode      = BYPASS_CODE( 21, 2, 1, 0 );
            pData->ReturnedData.rejectReason    = MYKI_BR_REJECT_REASON_INVALID_AMOUNT;
            return  RULE_RESULT_BYPASSED;
        }

        /*  2.  The sum of TPurse debit reversal amount (6) and TPurse balance (1) is
                less than or equal to the maximum TPurse balance (3) allowed. */
        if ( ( pData->DynamicData.tPurseDebitAmount + pMYKI_TAPurseBalance->Balance ) > pData->Tariff.TPurseMaximumBalance )
        {
            CsDbg( BRLL_RULE, "BR_VIX_LLSC_21_2 : TPurse debit reversal amount (%d) + TPurse balance (%d) > Maximum balance (%d)",
                    pData->DynamicData.tPurseDebitAmount, pMYKI_TAPurseBalance->Balance, pData->Tariff.TPurseMaximumBalance );
            pData->ReturnedData.bypassCode      = BYPASS_CODE( 21, 2, 2, 0 );
            pData->ReturnedData.rejectReason    = MYKI_BR_REJECT_REASON_EXCEED_MAX_BALANCE;
            return  RULE_RESULT_BYPASSED;
        }
    }

    /*  PROCESSING */
    {
        /*  1.  Performs TPurseUsage/Reverse transaction. */
        if ( myki_br_ldt_PurseUsage_Reverse( pData, pData->DynamicData.tPurseDebitAmount ) < 0 )
        {
            CsErrx( "BR_VIX_LLSC_21_2 : myki_br_ldt_PurseUsage_Reverse() failed" );
            return  RULE_RESULT_ERROR;
        }

        /*  2.  Create load log */
        {
            pData->InternalData.IsLoadLogUpdated        = TRUE;
            pTAppLoadLog                                = &pData->InternalData.LoadLogData;

            /*  a. Definition: */
            {
                /*  i.  ControlBitmap: Value (Done by framework) */
                /*  ii. If the transaction type is not set then */
                if ( pTAppLoadLog->transactionType == MYKI_BR_TRANSACTION_TYPE_NONE )
                {
                    /*  1.  Set the transaction type to Refund Value (4), */
                    pTAppLoadLog->transactionType       = MYKI_BR_TRANSACTION_TYPE_REFUND_VALUE;
                }
                else
                {
                    /*  2.  Else set the transaction type to Multiple Actionlists (21). */
                    pTAppLoadLog->transactionType       = MYKI_BR_TRANSACTION_TYPE_MULTIPLE_ACTION_LIST;
                }

                /*  ii. Set ProviderId (3) = current device service provider (16) (Done by framework)
                    iv. Set TxDateTime (4) as current date time (12) (Done by framework)
                    v.  Set Location object (5) to current device location (i.e. Entry Point, Route, Stop ID) (Done by framework) */
                pTAppLoadLog->transactionSequenceNumber = pMYKI_TAPurseControl->NextTxSeqNo - 1;
            }

            /*  b.  Value: */
            {
                /*  i.  Set Dynamic.LoadTxValue to Dynamic.LoadTxValue + the debit reversal amount (6) */
                pData->DynamicData.loadLogTxValue      += pData->DynamicData.tPurseDebitAmount;

                /*  ii. If the Dynamic.LoadTxValue is less than zero then */
                if ( pData->DynamicData.loadLogTxValue < 0 )
                {
                    /*  1.  Set the LoadLog.TxnValue to zero */
                    pTAppLoadLog->transactionValue      = 0;
                }
                else
                {
                    /*  2.  Else set the LoadLog.TxnValue to Dynamic.LoadTxValue */
                    pTAppLoadLog->transactionValue      = pData->DynamicData.loadLogTxValue;
                }
                pTAppLoadLog->isTransactionValueSet     = TRUE;

                /*  iii.Set NewTPuserBalance (7) = T-Purse balance (10) */
                pTAppLoadLog->isNewTPurseBalanceSet     = TRUE;
                pTAppLoadLog->newTPurseBalance          = pMYKI_TAPurseBalance->Balance;

                /*  iv. Set PaymentMethod (8) = Cash (2) */
                pTAppLoadLog->isPaymentMethodSet        = TRUE;
                pTAppLoadLog->paymentMethod             = TAPP_USAGE_LOG_PAYMENT_METHOD_TPURSE;
            }
        }
    }

    /*  Post-Conditions */
    {
        pData->ReturnedData.acceptReason        = MYKI_BR_ACCEPT_TPURSE_LOADED;
        pData->ReturnedData.remainingBalance    = pMYKI_TAPurseBalance->Balance;
        pData->ReturnedData.txnSeqNo            = ( pMYKI_TAPurseControl->NextTxSeqNo - 1 );
    }

    CsDbg( BRLL_RULE, "BR_VIX_LLSC_21_2 : Executed" );
    return  RULE_RESULT_EXECUTED;
}   /* BR_VIX_LLSC_21_2( ) */
