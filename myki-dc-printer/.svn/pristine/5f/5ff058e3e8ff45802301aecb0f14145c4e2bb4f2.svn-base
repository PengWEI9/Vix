#include <cs.h>
#include <csf.h>
#include <cstdlib>
#include <cstring>
#include <ipc.h>
#include <message_base.h>
#include <message_dc.h>
//#include <jsonParser.h>

typedef enum
{	
   IPC_TOPUP = 1,
   IPC_TOPUP_REV = 2,
   IPC_DRIVER_REPORT = 3,
   IPC_DRIVER_PORTION_REPORT = 4,
   IPC_DRIVER_MANUAL_REPORT = 5,
   IPC_DRIVER_REPORT_BROUGHT_FORWARD = 30,
   IPC_DRIVER_REPORT_OUT_OF_BALANCE = 31,
   IPC_DRIVER_PORTION_REPORT_BROUGHT_FORWARD = 40,
   IPC_DRIVER_PORTION_REPORT_OUT_OF_BALANCE = 41,
   IPC_DRIVER_MANUAL_REPORT_BROUGHT_FORWARD = 50,
   IPC_DRIVER_MANUAL_REPORT_OUT_OF_BALANCE = 51
   
} IPC_MESSAGE_TYPE_E;

int printerQueueId = -1;                                              // Incoming queue; also posted to by our serial receive thread

void fillCommonDataStruct(IPC_Common_Details_t *pCommonData)
{
	pCommonData->terminalID        = 128934;	
	pCommonData->busID             = 123456;
	pCommonData->shiftNumber       = 123;
	pCommonData->transactionNumber = 56; 
	
	strcpy(pCommonData->location,"Geelong Rail");	
	strcpy(pCommonData->mykiReference,"308425123455115");
	strcpy(pCommonData->salesMessage,"Sales message sample");
	
}

void fillCompanyDataStruct(IPC_Company_Details_t *pCompanyData)
{
	strcpy(pCompanyData->companyPhone,"+61312345678");
	strcpy(pCompanyData->companyName,"Test Company");
	strcpy(pCompanyData->companyABN,"NN NNN NNN NNN");
	strcpy(pCompanyData->companyWebSite,"https://translate.google.com.au");
	
}

void fillTopUpTestStruct( IPC_Printer_TpurseLoad_t * pBuf )
{
	memset( pBuf, 0,  sizeof(IPC_Printer_TpurseLoad_t) );

    pBuf->hdr.type                     = IPC_PRINTER_TPURSELOAD;
    pBuf->hdr.source                   = DC_PRINTER_TASK;
    
	fillCommonDataStruct( &(pBuf->commonData) );
	
	pBuf->receiptInvoiceThreshold      = 1000;
	pBuf->amountNewBalance             = 1005;
	pBuf->amountTopUp                  = 200;
	pBuf->amountTotal                  = 10000;
	
	fillCompanyDataStruct( &(pBuf->companyData) );	
	
}

void fillTopUpRevTestStruct(IPC_Reversal_TpurseLoad_t * pBuf)
{
	memset(pBuf, 0,  sizeof(IPC_Reversal_TpurseLoad_t));
    
	pBuf->hdr.type                     = IPC_PRINTER_TPURSELOAD_REV;
    pBuf->hdr.source                   = DC_PRINTER_TASK;
    	
	fillCommonDataStruct( &(pBuf->commonData) );
	
	pBuf->amountNewBalance             = 1050;
	pBuf->amountTopUp                  = 2008;
	pBuf->amountTotal                  = 10070;
	
	pBuf->origTransactionNumber        = 5678;
    
	pBuf->origDate = time(0); 
    
	fillCompanyDataStruct( &(pBuf->companyData) );
	
}


void fillDriverShiftTotalsTestStruct( IPC_DriverShiftReport_t * ipcRequest, int reportType, int cashBroughtForward, IPC_ShiftTotalsMaskLevel_e maskLevel )
{
	IPC_DriverShiftDetails_t * driverShiftDetails = &(ipcRequest->shiftDetails);

	memset( ipcRequest, 0,  sizeof(IPC_DriverShiftReport_t));
    
	ipcRequest->hdr.type		= IPC_PRINTER_DRIVER_SHIFT_REP;
    	ipcRequest->hdr.source  	= DC_PRINTER_TASK;
    	
        // Shift Report Header fields
	strncpy( driverShiftDetails->operatorID, "DC12345", IPC_STRING_MAX_LENGTH );  
	driverShiftDetails->shiftNumber = 6678;  
	strncpy( driverShiftDetails->busID, "1101AO", IPC_STRING_MAX_LENGTH );  
	
	driverShiftDetails->shiftEndDate = time(NULL);  
	driverShiftDetails->shiftStartDate = driverShiftDetails->shiftEndDate  - 3600;  

	ipcRequest->totalsMaskLevel = maskLevel;  
	driverShiftDetails->shiftCash.cashAmount = cashBroughtForward;  
	if ( cashBroughtForward == 0 ) {
		driverShiftDetails->shiftCash.cashStatus = CASH_NONE;  
	}

	switch ( reportType ) {
		case IPC_DRIVER_REPORT_BROUGHT_FORWARD:
			driverShiftDetails->shiftCash.cashStatus = CASH_BROUGHT_FORWARD;  
			ipcRequest->reportType	= REPORT_END_OF_SHIFT;
			break;
		case IPC_DRIVER_REPORT_OUT_OF_BALANCE:
			driverShiftDetails->shiftCash.cashStatus = CASH_OUT_OF_BALANCE;  
		case IPC_DRIVER_REPORT:
			ipcRequest->reportType	= REPORT_END_OF_SHIFT;
			break;
		case IPC_DRIVER_PORTION_REPORT_BROUGHT_FORWARD:
			driverShiftDetails->shiftCash.cashStatus = CASH_BROUGHT_FORWARD;  
			ipcRequest->reportType	= REPORT_SHIFT_PORTION;
			break;
		case IPC_DRIVER_PORTION_REPORT_OUT_OF_BALANCE:
			driverShiftDetails->shiftCash.cashStatus = CASH_OUT_OF_BALANCE;  
		case IPC_DRIVER_PORTION_REPORT:
			ipcRequest->reportType	= REPORT_SHIFT_PORTION;
			break;
		case IPC_DRIVER_MANUAL_REPORT_BROUGHT_FORWARD:
			driverShiftDetails->shiftCash.cashStatus = CASH_BROUGHT_FORWARD;  
			ipcRequest->reportType	= REPORT_MANUAL;
			break;
		case IPC_DRIVER_MANUAL_REPORT_OUT_OF_BALANCE:
			driverShiftDetails->shiftCash.cashStatus = CASH_OUT_OF_BALANCE;  
		case IPC_DRIVER_MANUAL_REPORT:
			ipcRequest->reportType	= REPORT_MANUAL;
			break;
		default: 
			CsErrx("fillDriverShiftTotalsTestStruct:: Invalid report type %d", reportType);
			break;
	}

        // Shift Report body fields
	// Cash 
        ipcRequest->cashTotals.grossAmount = 6300 + cashBroughtForward;
        ipcRequest->cashTotals.annulledAmount = 300;
        ipcRequest->cashTotals.netAmount = 6000 + cashBroughtForward;

	// Other t-purse payments
        ipcRequest->otherTotals.grossAmount = 900;
        ipcRequest->otherTotals.annulledAmount = 0;
        ipcRequest->otherTotals.netAmount = 900;

	// PaperTickets
        ipcRequest->paperTickets.grossTickets = 0;
        ipcRequest->paperTickets.annulledTickets = 0;
        ipcRequest->paperTickets.netTickets = 0;

	// Sundry Tickets
        ipcRequest->sundryTickets.grossTickets = 11;
        ipcRequest->sundryTickets.annulledTickets = 1;
        ipcRequest->sundryTickets.netTickets = 10;

	// Passenger count
	ipcRequest->fullPassCount = 12;
	ipcRequest->concessionPassCount = 22;

	ipcRequest->annulledTickets = 1;
	ipcRequest->netCash = 6000 + cashBroughtForward;
}


int main(int argc, char *argv[])
{
	int sendResult = 0;
	int initResult = 0;	
	int iChoice    = 0;
	int maskLevel  = 2;
	
    atexit((void (*)())IpcClose);
    
	if( argc < 2 )
		iChoice = IPC_TOPUP;
	else { 
	       	iChoice = atoi(argv[1]);
		if( argc > 2 )
        		maskLevel = atoi(argv[2]);
	}

    if ( ( initResult = IpcInit() ) != 0 )                           // Initialize IPC communication
    {
        CsErrx("main:: IpcInit FAILED result %d", initResult);
        return -1;
    }
	
    printerQueueId   = IpcGetID(DC_PRINTER_TASK); 

	switch(iChoice)
	{
		case IPC_TOPUP:
		    IPC_Printer_TpurseLoad_t  topUpBuf;
			fillTopUpTestStruct(&topUpBuf);
			
		    if( ( sendResult = IpcSend(printerQueueId, &topUpBuf, sizeof topUpBuf) ) != 0 )  
			    CsErrx("main:: FAILED TO SEND IPC_TOPUP MESSAGE  %d", sendResult);			
			else
			    CsDebug(3, (3, "main:: SENDING IPC_TOPUP MESSAGE")); 
			break;
			
		case IPC_TOPUP_REV:
		    IPC_Reversal_TpurseLoad_t topUpRevBuf;
			fillTopUpRevTestStruct(&topUpRevBuf);
			
			if( ( sendResult = IpcSend(printerQueueId, &topUpRevBuf, sizeof topUpRevBuf) ) != 0 )  
			    CsErrx("main:: FAILED TO SEND IPC_TOPUP_REV MESSAGE  %d", sendResult);
			else
			    CsDebug(3, (3, "main:: SENDING IPC_TOPUP_REV MESSAGE")); 
			break;
			
		case IPC_DRIVER_REPORT:
		case IPC_DRIVER_REPORT_OUT_OF_BALANCE:
   		case IPC_DRIVER_PORTION_REPORT:
   		case IPC_DRIVER_PORTION_REPORT_OUT_OF_BALANCE:
   		case IPC_DRIVER_MANUAL_REPORT:
   		case IPC_DRIVER_MANUAL_REPORT_OUT_OF_BALANCE:
		    	IPC_DriverShiftReport_t driverShiftReportBuf;
			fillDriverShiftTotalsTestStruct(&driverShiftReportBuf, iChoice, 0, (IPC_ShiftTotalsMaskLevel_e)maskLevel);
			
			if( ( sendResult = IpcSend(printerQueueId, &driverShiftReportBuf, sizeof ( driverShiftReportBuf) ) ) != 0 ) {  
			    CsErrx("main:: FAILED TO SEND IPC_DriverShiftReport MESSAGE  %d", sendResult);
			}		
			else
			    CsDebug(3, (3, "main:: SENDING IPC_DriverShiftReport MESSAGE")); 
			break;

   		case IPC_DRIVER_REPORT_BROUGHT_FORWARD:
   		case IPC_DRIVER_PORTION_REPORT_BROUGHT_FORWARD:
   		case IPC_DRIVER_MANUAL_REPORT_BROUGHT_FORWARD:
		    	IPC_DriverShiftReport_t driverShiftReportBufBf;
			fillDriverShiftTotalsTestStruct(&driverShiftReportBufBf, iChoice, 2000, (IPC_ShiftTotalsMaskLevel_e)maskLevel);
			
			if( ( sendResult = IpcSend(printerQueueId, &driverShiftReportBufBf, sizeof driverShiftReportBufBf) ) != 0 )  
			    CsErrx("main:: FAILED TO SEND IPC_DriverShiftReport MESSAGE  %d", sendResult);
			else
			    CsDebug(3, (3, "main:: SENDING IPC_DriverShiftReport MESSAGE")); 
			break;

		default:
		    CsWarnx("Unknown message type");
		    break;
	}	
	
    return 0;
}


