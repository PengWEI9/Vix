#include <iostream>
#include <iomanip>
#include <sstream> 
#include <cerrno>
#include <cstdlib>
#include <time.h>
#include <csfcmd.h>
#include <Serial.h>
#include "MykiPrinter.h"

const int MAX_ROW_LENGTH = 36;            //Max characters per row in Normal font

/*
   Helper functions for myki printer
*/

void replaceString( std::string& str, const std::string& oldStr, const std::string& newStr );

std::string formatAmount( int nNumber );
std::string formatAmount( int amount, bool mask );
std::string formatIDNumber( int nNumber );
std::string toString( time_t& time, char * timeString, int maxTimeStringLength );
std::string toString( int number, bool doMask );

template <typename T>
std::string NumberToString(T num)
{
    using namespace std;
    stringstream converter;
    converter << num;
    return converter.str();
}


/*==========================================================================*
 **
 **  MykiPrinter
 **
 **  Description     :
 **      Constructor that initialises the connection to the serial port. 
 **
 **      Also subscribes a task id and an IPC message to the serial class provided by 
 **      'reportRecieveCharacter_SourceQueueId' and 'reportRecieveCharacter_SourceQueueId'.
 **      This will be used by the read thread internally in the serial class. 
 **      Any received data coming from the serial port will be reported to the message queue 
 **      provided by reportRecieveCharacter_SourceQueueId.
 **      
 **  Parameters      :
 **      JSONFilePath                                       [I]     Path to JSON template
 **      reportRecieveCharacter_SourceQueueId               [I]     Task ID
 **      reportRecieveCharacter_MessageId                   [I]     IPC message ID
 **      port                                               [I]     Serial port to connect to
 **      speed                                              [I]     speed baud rate
 **      data_bits                                          [I]     typically 8
 **      parity                                             [I]     'n', 'o', 'e', 'm', 's' 
 **      stop_bits                                          [I]     1 or 2
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **
 **==========================================================================*/
MykiPrinter::MykiPrinter(char *JSONFilePath, 
                         int reportRecieveCharacter_SourceQueueId, 
						 int reportRecieveCharacter_MessageId,
                         const char* port, 
						 unsigned long speed, 
						 unsigned int data_bits, 
						 char parity, 
						 unsigned int stop_bits)
: SerialPrinter(reportRecieveCharacter_SourceQueueId, 
                reportRecieveCharacter_MessageId, 
				port, 
				speed, 
				data_bits, 
				parity, 
				stop_bits)
{
    m_jsonParser = new JSONParser(JSONFilePath);
}

/*==========================================================================*
 **
 **  printTopUpReversal
 **
 **  Description     :
 **      Public interface of the application to send request to print a Top up receipt
 **      
 **  Parameters      :
 **      pTopUpRevStruct              IPC message containing fields of the receipt
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **
 **==========================================================================*/
int MykiPrinter::printTopUpReversal(IPC_Reversal_TpurseLoad_t *pTopUpRevStruct)
{
    const enum receipt_e tax_receipt = Reversal;
	
	Json::Value titleData	= m_jsonParser->getTitle(tax_receipt);
    Json::Value headerData	= m_jsonParser->getHeader(tax_receipt);     
    Json::Value bodyData    = m_jsonParser->getBody(tax_receipt); 
    Json::Value footerData  = m_jsonParser->getFooter(tax_receipt);     
	
	populateTopUpRevPlaceHolder( titleData,  pTopUpRevStruct );
	populateTopUpRevPlaceHolder( headerData, pTopUpRevStruct );
	populateTopUpRevPlaceHolder( bodyData,   pTopUpRevStruct );
	populateTopUpRevPlaceHolder( footerData, pTopUpRevStruct );
	
	// Final line feeds and cut
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	
	sendCommand(PARTIAL_CUT);
	
	return 0;
}

/*==========================================================================*
 **
 **  populateTopUpRevPlaceHolder
 **
 **  Description     :
 **      Helper function to replace any placeholders provided in the template
 **      
 **  Parameters      :
 **      data                          json template containing the fields to render
 **      pPrinterMsg                   pointer to Top Up IPC data structure
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      Refer to the json template on how to structure it.
 **==========================================================================*/
void MykiPrinter::populateTopUpRevPlaceHolder(Json::Value &data, IPC_Reversal_TpurseLoad_t *pReversalStruct)
{
	// Replace specific receipt place holders with values
	Json::Value::Members lines = data.getMemberNames();
		
	for ( unsigned int index = 0; index < lines.size(); index++ )
    {
        std::string memberName = lines[index];
				
	    if( data[memberName]["hasPlaceHolder"].asBool() )
        {
			std::string temp = data[memberName]["data"].asString();    
	
	        CsDebug(3, (3, "MykiPrinter::populatePlaceHolder:: temp:%s",temp.c_str()));
	
            this->populateCompanyHolders( temp, &(pReversalStruct->companyData) );	            
			
			// Top Up specific fields
			if( temp.find("[AmountTopUp]") != std::string::npos ) 
				replaceString( temp, "[AmountTopUp]", formatAmount(pReversalStruct->amountTopUp) ); 
			
			if( temp.find("[AmountNewBalance]") != std::string::npos ) 
				replaceString( temp, "[AmountNewBalance]", formatAmount(pReversalStruct->amountNewBalance) );  
			
			if( temp.find("[AmountTotal]") != std::string::npos ) 
				replaceString( temp, "[AmountTotal]", formatAmount(pReversalStruct->amountTotal) ); 
			
			if( temp.find("[OrigShiftNumber]") != std::string::npos ) 
				replaceString( temp, "[OrigShiftNumber]",  formatIDNumber( pReversalStruct->commonData.shiftNumber ));
			
            if( temp.find("[OrigTransactionNumber]") != std::string::npos ) 
				replaceString( temp, "[OrigTransactionNumber]",  formatIDNumber( pReversalStruct->origTransactionNumber ));
			
			if( temp.find("[OrigDate]") != std::string::npos ) 
			{
                tm currentTime = *localtime( &(pReversalStruct->origDate) ); 
                char tmdescr[30]={0};
                                
                if( strftime( tmdescr, sizeof(tmdescr)-1, "%d %b %y %I:%M %p",  &currentTime ) == 0 )
                {
                    CsErrx("MykiPrinter::populateTopUpRevPlaceHolder Error formatting the orig time ", errno);
                }
                replaceString( temp, "[OrigDate]",  tmdescr );
            }	
			
			this->populateCommonHolders( temp, &(pReversalStruct->commonData) );		 
	        
			CsDebug(3, (3, "MykiPrinter::populatePlaceHolder:: 2 temp:%s",temp.c_str()));
			
			data[memberName]["data"] = temp;
	    }
		
		// Format output and print
	    this->render( data[memberName] );
	}	

}


/*==========================================================================*
 **
 **  printTopUp
 **
 **  Description     :
 **      Public interface of the application to send request to print a Top up receipt
 **      
 **  Parameters      :
 **      pTopUpStruct          IPC message containing fields of the receipt
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **
 **==========================================================================*/
int MykiPrinter::printTopUp(IPC_Printer_TpurseLoad_t *pTopUpStruct)
{
    const enum receipt_e tax_receipt = TopUp;
	
	Json::Value titleData	= m_jsonParser->getTitle(tax_receipt);
    Json::Value headerData	= m_jsonParser->getHeader(tax_receipt);     
    Json::Value bodyData    = m_jsonParser->getBody(tax_receipt); 
    Json::Value footerData  = m_jsonParser->getFooter(tax_receipt);     
	
	populateTopUpPlaceHolder( titleData,  pTopUpStruct );
	populateTopUpPlaceHolder( headerData, pTopUpStruct );
	populateTopUpPlaceHolder( bodyData,   pTopUpStruct );
	populateTopUpPlaceHolder( footerData, pTopUpStruct );
	
	// Final line feeds and cut
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	
	sendCommand(PARTIAL_CUT);
	
	return 0;
}


/*==========================================================================*
 **
 **  populateTopUpPlaceHolder
 **
 **  Description     :
 **      Helper function to replace any placeholders provided in the template
 **      
 **  Parameters      :
 **      data                  json template containing the fields to render
 **      pPrinterMsg           pointer to Top Up IPC data structure
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      Refer to the json template on how to structure it.
 **==========================================================================*/
void MykiPrinter::populateTopUpPlaceHolder(Json::Value &data, IPC_Printer_TpurseLoad_t *pTopUpStruct)
{
	// Replace specific receipt place holders with values
	Json::Value::Members lines = data.getMemberNames();
	
	for ( unsigned int index = 0; index < lines.size(); index++ )
    {
        std::string memberName = lines[index];
		if( data[memberName].isMember("condition") )
            if( data[memberName]["condition"].asString().compare("RIMP")  && 
		       ( pTopUpStruct->receiptInvoiceThreshold - pTopUpStruct->amountTotal >= 0.01 ) 
		      )
			{
				continue;
			}  		
		
	    if( data[memberName]["hasPlaceHolder"].asBool() )
        {
			std::string temp = data[memberName]["data"].asString();    
  
	        CsDebug(3, (3, "MykiPrinter::populatePlaceHolder:: temp:%s",temp.c_str()));
	
            this->populateCompanyHolders( temp, &(pTopUpStruct->companyData) );	
            
			// Top Up specific fields
			if( temp.find("[AmountTopUp]") != std::string::npos ) 
				replaceString( temp, "[AmountTopUp]", formatAmount(pTopUpStruct->amountTopUp) ); 
			
			if( temp.find("[AmountNewBalance]") != std::string::npos ) 
				replaceString( temp, "[AmountNewBalance]", formatAmount(pTopUpStruct->amountNewBalance) );  
			
			if( temp.find("[AmountTotal]") != std::string::npos ) 
				replaceString( temp, "[AmountTotal]", formatAmount(pTopUpStruct->amountTotal) ); 
			
			if( temp.find("[RIMP]") != std::string::npos ) 
				replaceString( temp, "[RIMP]", NumberToString(pTopUpStruct->receiptInvoiceThreshold) );
			
			this->populateCommonHolders( temp, &(pTopUpStruct->commonData) );		 
           
			data[memberName]["data"] = temp;
	    }
		
		// Format output and print
	    this->render( data[memberName] );
	}	

}


/*==========================================================================*
 **
 **  printDriverShiftReport
 **
 **  Description     :
 **      Public interface of the application to send request to print a specified Driver Shift Report 
 **      
 **  Parameters      :
 **      driverShiftData          pointer to IPC_Driver_Shift_Report_t structure containing all the fields to be printed on the reportr
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **
 **==========================================================================*/
int MykiPrinter::printDriverShiftReport(IPC_DriverShiftReport_t *driverShiftData)
{
    const enum receipt_e driverReport = DriverShift;
	Json::Value titleData	= m_jsonParser->getTitle( driverReport );
	Json::Value headerData	= m_jsonParser->getHeader( driverReport );     
	Json::Value bodyData   	= m_jsonParser->getBody( driverReport ); 
	Json::Value footerData  = m_jsonParser->getFooter( driverReport );     
	
	populateDriverShiftPlaceHolder( titleData,  driverShiftData );
	populateDriverShiftPlaceHolder( headerData, driverShiftData );
	populateDriverShiftPlaceHolder( bodyData,   driverShiftData );
	populateDriverShiftPlaceHolder( footerData, driverShiftData );
	
	// Final line feeds and cut
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	sendCommand(LINE_FEED);
	
	sendCommand(PARTIAL_CUT);
	
	return 0;
}


/*==========================================================================*
 **
 **  populateDriverShiftPlaceHolder
 **
 **  Description     :
 **      Helper function to replace any placeholders provided in the template
 **      
 **  Parameters      :
 **      reportData            		json template containing the fields to render
 **      verShiftData      		pointer to IPC_Driver_Shift_Report_t structure containing data to be printed on the Driver Shift Report
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **==========================================================================*/


void MykiPrinter::populateDriverShiftPlaceHolder(Json::Value &reportData, IPC_DriverShiftReport_t *driverShiftData )
{
	Json::Value::Members lines = reportData.getMemberNames();
	IPC_DriverShiftDetails_t *driverShiftDetails = &(driverShiftData->shiftDetails);

	for ( unsigned int index = 0; index < lines.size(); index++ ) {
        	std::string memberName = lines[index];

		// Determine whether Cash Brought Forward  or Out of Balance line should be present in the report
		if( reportData[memberName].isMember("condition") ) {

            		if( ( !reportData[memberName]["condition"].asString().compare("BF")  && 
		       		( driverShiftDetails->shiftCash.cashStatus != CASH_BROUGHT_FORWARD ) ) ||
            		    ( !reportData[memberName]["condition"].asString().compare("OB")  && 
		       		( driverShiftDetails->shiftCash.cashStatus != CASH_OUT_OF_BALANCE ) ) ) { 
				continue;
			}
		}	
		
		if( reportData[memberName]["hasPlaceHolder"].asBool() ) {
			std::string temp = reportData[memberName]["data"].asString();    
  
	        	CsDebug(3, (3, "MykiPrinter::populateDriverShiftPlaceHolder:: temp:%s",temp.c_str()));

			// Shift Report Title
			if( temp.find("[ReportName]") != std::string::npos ) {
				std::string repTitle;
				switch( driverShiftData->reportType ) {
					case REPORT_END_OF_SHIFT:
						repTitle = "END OF SHIFT";
						break;
					case REPORT_SHIFT_PORTION:
						repTitle = "SHIFT PORTION";
						break;
					case REPORT_MANUAL:
						repTitle = "MANUAL END OF SHIFT";
						break;
					default:
						CsErrx("MykiPrinter:: Unknown Driver report type \n");
						break;		
				} 
				replaceString( temp, "[ReportName]", repTitle ); 
            		}

			// Shift Report Header fields
			replaceString( temp, "[OperatorID]", driverShiftDetails->operatorID ); 
			if ( temp.find( "[ShiftNumber]" ) != std::string::npos ) 
				replaceString( temp, "[ShiftNumber]", toString(driverShiftDetails->shiftNumber, false ) ); 
			replaceString( temp, "[BusPlateN]", driverShiftDetails->busID );
 
			#define TIME_STR_MAX_LENGTH	24
			char formattedTime[TIME_STR_MAX_LENGTH] = "";
			if ( temp.find( "[DateTimeShiftStart]" ) != std::string::npos ) 
				replaceString( temp, "[DateTimeShiftStart]", toString( driverShiftDetails->shiftStartDate, formattedTime, TIME_STR_MAX_LENGTH ) ) ; 
			if ( temp.find( "[DateTimeShiftEnd]" ) != std::string::npos ) 
				replaceString( temp, "[DateTimeShiftEnd]", toString( driverShiftDetails->shiftEndDate, formattedTime, TIME_STR_MAX_LENGTH ) ); 
			replaceString( temp, "[NetCashBroughtForward]", "Net Cash BF" ); 
			if ( temp.find( "[AmountBroughtForward]" ) != std::string::npos ) 
				replaceString( temp, "[AmountBroughtForward]", formatAmount( driverShiftDetails->shiftCash.cashAmount, driverShiftData->totalsMaskLevel != MASK_NONE ) ); 
			// Shift Report body fields
			this->populateDriverShiftBodyPlaceHolder( temp, driverShiftData );


			reportData[memberName]["data"] = temp;
		}
            // Format output and print
	    this->render( reportData[memberName] );
	}
}


/*==========================================================================*
 **
 **  populateDriverShiftBodyPlaceHolder
 **
 **  Description     :
 **      Helper function to replace any placeholders in the "body" of the Driver Shift report template
 **      
 **  Parameters      :
 **      dataStr            		json template line containing "data" element
 **      driverShiftData		pointer to IPC_Driver_Shift_Report_t structure containing data to be printed on  Driver Shift Report
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      Refer to the json template on how to structure it.
 **==========================================================================*/
void MykiPrinter::populateDriverShiftBodyPlaceHolder(std::string& dataStr, IPC_DriverShiftReport_t *driverShiftData)
{
	IPC_ShiftTotalsMaskLevel_e maskLevel = driverShiftData->totalsMaskLevel; 
	// Shift Report body fields
    if( dataStr.find( "[AmountGrossCash]" ) != std::string::npos )
	replaceString( dataStr, "[AmountGrossCash]", formatAmount( driverShiftData->cashTotals.grossAmount, maskLevel != MASK_NONE ) ); 
    if( dataStr.find( "[AmountAnnulledCash]" ) != std::string::npos )
	replaceString( dataStr, "[AmountAnnulledCash]", formatAmount (driverShiftData->cashTotals.annulledAmount, maskLevel != MASK_NONE ) ); 
    if( dataStr.find( "[AmountNetCash]" ) != std::string::npos )
	replaceString( dataStr, "[AmountNetCash]", formatAmount(driverShiftData->cashTotals.netAmount, maskLevel != MASK_NONE) ) ; 

    if( dataStr.find( "[AmountGrossOther]" ) != std::string::npos )
	replaceString( dataStr, "[AmountGrossOther]", formatAmount( driverShiftData->otherTotals.grossAmount, maskLevel != MASK_NONE ) ); 
    if( dataStr.find( "[AmountAnnulledOther]" ) != std::string::npos )
	replaceString( dataStr, "[AmountAnnulledOther]", formatAmount( driverShiftData->otherTotals.annulledAmount, maskLevel != MASK_NONE ) ); 
    if( dataStr.find( "[AmountNetOther]" ) != std::string::npos )
	replaceString( dataStr, "[AmountNetOther]", formatAmount( driverShiftData->otherTotals.netAmount, maskLevel != MASK_NONE ) ); 

    if( dataStr.find( "[GrossPaperTickets]" ) != std::string::npos )
	replaceString( dataStr, "[GrossPaperTickets]", toString( driverShiftData->paperTickets.grossTickets, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[AnnulledPaperTickets]" ) != std::string::npos )
	replaceString( dataStr, "[AnnulledPaperTickets]", toString( driverShiftData->paperTickets.annulledTickets, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[NetPaperTickets]" ) != std::string::npos )
	replaceString( dataStr, "[NetPaperTickets]", toString( driverShiftData->paperTickets.netTickets, maskLevel == MASK_ALL ) ); 

    if( dataStr.find( "[GrossSundryTickets]" ) != std::string::npos )
	replaceString( dataStr, "[GrossSundryTickets]", toString( driverShiftData->sundryTickets.grossTickets, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[AnnulledSundryTickets]" ) != std::string::npos )
	replaceString( dataStr, "[AnnulledSundryTickets]", toString( driverShiftData->sundryTickets.annulledTickets, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[NetSundryTickets]" ) != std::string::npos )
	replaceString( dataStr, "[NetSundryTickets]", toString( driverShiftData->sundryTickets.netTickets, maskLevel == MASK_ALL ) ); 

    if( dataStr.find( "[FullPassCount]" ) != std::string::npos )
	replaceString( dataStr, "[FullPassCount]", toString( driverShiftData->fullPassCount, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[ConcessionPassCount]" ) != std::string::npos )
	replaceString( dataStr, "[ConcessionPassCount]", toString( driverShiftData->concessionPassCount, maskLevel == MASK_ALL ) ); 

    if( dataStr.find( "[AnnulledTickets]" )  != std::string::npos )
	replaceString( dataStr, "[AnnulledTickets]", toString( driverShiftData->annulledTickets, maskLevel == MASK_ALL ) ); 
    if( dataStr.find( "[AmountNetCash]" ) != std::string::npos )
	replaceString( dataStr, "[AmountNetCash]", formatAmount( driverShiftData->netCash, maskLevel != MASK_NONE ) ); 
}

/*==========================================================================*
 **
 **  render
 **
 **  Description     :
 **      renders the json template replacing any placeholders provided in the IPC message and 
 **      applies the necessary fonts specified by the json template.
 **      
 **  Parameters      :
 **      data                  json template containing the fields to render
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      Refer to the json template on how to structure it.
 **==========================================================================*/
void MykiPrinter::render(Json::Value &data)//, std::string memberName) 
{
	// Search for emphasize attributes 
    data["isBold"].asBool() ? sendCommand(SET_BOLD) : sendCommand(UNSET_BOLD);
	
	// Search for font attributes
    data["font"].asString().compare("small") ?  sendCommand(SMALL_FONT) : sendCommand(DEFAULT_FONT);
		
	// Search for justification attributes
	std::string temp = data["data"].asString();
    		
	std::string strRightHolder("[Right]");
	std::size_t nRightPos  = temp.find(strRightHolder);
		
    std::string strMiddleHolder("[Middle]");
	std::size_t nMiddlePos = temp.find(strMiddleHolder);		
		
	if( ( nRightPos != std::string::npos ) || ( nMiddlePos != std::string::npos ) )
	{				
		if ( nRightPos != std::string::npos )
		{
			// Cut line before [Right] holder and append spaces to fill MAX_ROW_LENGTH, then print
			int countSpace = MAX_ROW_LENGTH - temp.length() + strRightHolder.length();
			
			if( countSpace < 0 )
				countSpace = 0;
			
			print( temp.substr(0, nRightPos - 1).append(countSpace, ' ') );
		    print( temp.substr(nRightPos + strRightHolder.length()) );
            
			std::cout  << "print: " << temp.substr(0, nRightPos - 1).append(countSpace, ' ')
       				   << temp.substr(nRightPos + strRightHolder.length()) << std::endl;
		}
        else
		{
			print( temp.substr( 0, nMiddlePos ) );
			//sendCommand(MID_JUSTIFY);
			print( temp.substr( nMiddlePos + strMiddleHolder.length() ) );
		}		            
		//sendCommand(LEFT_JUSTIFY);			
	} 
	else
    {
		// Print default justification
	    std::cout  << "print: " << data["data"].asString() << std::endl;
        print( data["data"].asString() ); 
	}
		
	sendCommand(LINE_FEED);
	
}


/*==========================================================================*
 **
 **  populateCommonHolders
 **
 **  Description     :
 **      Replaces general placeholders provided in the JSON template file with 
 **      their values from IPC structure.
 **      
 **  Parameters      :
 **      dataString           json template line with data
 **      pPrinterMsg          pointer to data structure containing general fields valid for all receipts
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      None
 **==========================================================================*/
void MykiPrinter::populateCommonHolders(std::string &dataString, IPC_Common_Details_t *pCommonData)
{
	// IDs and location data
	if( dataString.find("[TerminalID]") != std::string::npos ) 
        replaceString( dataString, "[TerminalID]", NumberToString( pCommonData->terminalID ) );              
    
	if( dataString.find("[Location]") != std::string::npos) 
        replaceString( dataString, "[Location]", pCommonData->location ); 

	if( dataString.find("[BusID]") != std::string::npos ) 
        replaceString( dataString, "[BusID]",  NumberToString( pCommonData->busID ) );
	
	if( dataString.find("[ShiftNumber]") != std::string::npos ) 
        replaceString( dataString, "[ShiftNumber]",  formatIDNumber( pCommonData->shiftNumber ) );
	
	if( dataString.find("[TransactionNumber]") != std::string::npos ) 
        replaceString( dataString, "[TransactionNumber]",  formatIDNumber( pCommonData->transactionNumber ) );
	
	if( dataString.find("[MykiReference]") != std::string::npos ) 
    {
		if(std::string(pCommonData->mykiReference).length() < 15)
		{
			// Reference is shorter than expected, do not format, just print
			CsWarnx("MykiPrinter::populateCommonHolders MykiReference %s is shorter than expected", pCommonData->mykiReference);
			replaceString( dataString, "[MykiReference]", pCommonData->mykiReference );
		}
		else
		{
			
		
			// Cut symbols between 7 and 11 and mask them with XXXXX
			std::string strMyKi = std::string(pCommonData->mykiReference).substr(0,6) 
									+ "XXXXX" 
									+ std::string(pCommonData->mykiReference).substr(11);
			
			CsDebug(3, (3, "MykiPrinter::populatePlaceHolder:: MykiReference:%s",pCommonData->mykiReference));
			
			// Add some spaces to format according to spec
			strMyKi.insert(1, 1, ' ');
			strMyKi.insert(7, 1, ' ');
			strMyKi.insert(12, 1, ' ');
			strMyKi.insert(17, 1, ' ');
			
			replaceString( dataString, "[MykiReference]", strMyKi );        
		}
        CsDebug(3, (3, "MykiPrinter::populatePlaceHolder:: replaceString:%s",dataString.c_str()));		
	}	
	
	if( dataString.find("[Message]") != std::string::npos ) 
        replaceString( dataString, "[Message]",  pCommonData->salesMessage );	
	
	// Get current date
	if( dataString.find("[Date]") != std::string::npos )
    {
		time_t timeStruct = time(0); 
        tm currentTime = *localtime(&timeStruct); 
        char tmdescr[30]={0};
     
        if( strftime(tmdescr, sizeof(tmdescr)-1, "%d %b %y %I:%M %p", &currentTime) == 0 )
		{
			CsErrx("MykiPrinter::populatePlaceHolder Error formatting the time ", errno);
		}
	    replaceString( dataString, "[Date]",  tmdescr );
	}	
}

/*==========================================================================*
 **
 **  populateCompanyHolders
 **
 **  Description     :
 **      Replaces company placeholders provided in the JSON template file with 
 **      their values from IPC structure.
 **      
 **  Parameters      :
 **      dataString           json template line with data
 **      pCompanyData         pointer to data structure containing company data valid for all receipts
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **      None
 **==========================================================================*/
void MykiPrinter::populateCompanyHolders(std::string &dataString, IPC_Company_Details_t *pCompanyData)
{
	// Company data	
	if( dataString.find("[CompanyPhone]") != std::string::npos ) 
	    replaceString( dataString, "[CompanyPhone]", pCompanyData->companyPhone ); 
		
	if( dataString.find("[CompanyName]") != std::string::npos ) 
	    replaceString( dataString, "[CompanyName]", pCompanyData->companyName );
		
	if( dataString.find("[CompanyABN]") != std::string::npos ) 
        replaceString( dataString, "[CompanyABN]", pCompanyData->companyABN );
	
	if( dataString.find("[CompanyWebSite]") != std::string::npos ) 
        replaceString( dataString, "[CompanyWebSite]", pCompanyData->companyWebSite );
}


MykiPrinter::~MykiPrinter()
{
    delete m_jsonParser;
}

/*==========================================================================*
 **
 **  replaceString
 **
 **  Description     :
 **      Replaces all occurrences of a string in another string
 **      
 **  Parameters      :
 **      str                 string to be manipuated
 **      oldStr              string to be replaced
 **      newStr              string to put in
 **  Returns         :
 **      None
 **
 **==========================================================================*/
void replaceString(std::string& str, const std::string& oldStr, const std::string& newStr)
{
    size_t pos = 0;
    while( (pos = str.find(oldStr, pos)) != std::string::npos )
    {
        str.replace(pos, oldStr.length(), newStr);
        pos += newStr.length();
    }
}



/*==========================================================================*
 **
 **  formatAmount
 **
 **  Description     :
 **      Convers amount in cents into formatted dollar/cents  value
 **      
 **  Parameters      :
 **      nNumber             amount coming from DC (it is multiplied by 100 and stored as int)
 **
 **  Returns         :
 **      std::string         formatted string
 **
 **==========================================================================*/
std::string formatAmount( int nNumber )
{
	std::ostringstream strAmount;

	strAmount << nNumber / 100 << '.' << std::setw(2) << std::setfill('0') << nNumber % 100;
	
	return strAmount.str();
}


/*==========================================================================*
 **
 **  formatAmount
 **
 **  Description     :
 **      Converts amount in cents into formatted dollar/cents value or a masks it as ******
 **      
 **  Parameters      :
 **      amount             amount coming from DC (it is multiplied by 100 and stored as int)
 **	 doMask		    flag indicating whether the amoubt should be masked	
 **  Returns         :
 **      std::string         formatted string
 **
 **==========================================================================*/
std::string formatAmount( int amount, bool doMask )
{
	if( doMask == false ) {
		std::ostringstream strAmount;
		strAmount << '$' << amount / 100 << '.' << std::setw(2) << std::setfill('0') << amount % 100;
		return strAmount.str();
	}
	else 
		return ( "*******");
}

/*==========================================================================*
 **
 **  formatIDNumber
 **
 **  Description     :
 **      Formats transaction ID and shift number to NNNN 
 **      
 **  Parameters      :
 **      nNumber             initial ID value
 **
 **  Returns         :
 **      std::string         formatted string
 **
 **==========================================================================*/
std::string formatIDNumber( int nNumber )
{
	std::ostringstream strAmount;

	strAmount << std::setfill('0') << std::setw(4) << nNumber;
	
	return strAmount.str();
}


/*==========================================================================*
 **
 ** toString 
 **
 **  Description     :
 **      Converts int to string withouut any formatting 
 **      
 **  Parameters      :
 **      number             int value to convert
 **	 doMask		    flag indicating whether the number should be masked	
 **
 **  Returns         :
 **      std::string        value as string
 **
 **==========================================================================*/
std::string toString( int number, bool doMask )
{
	if( doMask == false ) { 
		std::ostringstream s;
		s << number;
		return s.str();
	}
	else
		return ( "*******");
}


/*==========================================================================*
 **
 ** toString 
 **
 **  Description     :
 **      Converts time in time_t to dd/mm/yy hh:mm formatted string 
 **      
 **  Parameters      :
 **      time             	  time_t value to convert
 **      timeString	  	  buffer for the formatted time string
 **      maxTimeStringLength	  size of the buffer 
 **
 **  Returns         :
 **      std::string        formatted  string
 **
 **==========================================================================*/
std::string toString( time_t& time, char * timeString, int maxTimeStringLength )
{
        if( strftime(timeString, maxTimeStringLength - 1, "%d/%m/%y %H:%M", localtime( &time ) ) == 0 )
		{
			CsErrx("MykiPrinter::toString: Error formatting the time ", errno);
		}
	return timeString;
}

