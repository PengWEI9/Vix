#ifndef MYKIPRINTER_H
#define MYKIPRINTER_H

#include <iostream>
#include <stdint.h>
#include <Serial.h>
#include <cstdio>
#include <message_base.h>
#include <message_dc.h>

#include "jsonParser.h"
#include "SerialPrinter.h"
//#include "EpsonCommands.h"


/* Inherited methods
   int print(std::istream& is);
   int print(const std::string& text);
   int sendCommand(const unsigned char *command);
   */	
class  MykiPrinter : public SerialPrinter
{
    public:
        // Constructor
        MykiPrinter(char *JSONFilePath, int reportRecieveCharacter_SourceQueueId, int reportRecieveCharacter_MessageId, const char* port, unsigned long speed, unsigned int data_bits, char parity, unsigned int stop_bits);
        // Destructor.
        ~MykiPrinter();
        
		// Printing methods per message type
        int  printTopUp(IPC_Printer_TpurseLoad_t *p);
	int  printTopUpReversal(IPC_Reversal_TpurseLoad_t *p);              
	int  printDriverShiftReport(IPC_DriverShiftReport_t *p);              
      
    private:
        MykiPrinter();
		
	// Top Up receipt formatting methods
	void populateTopUpPlaceHolder(Json::Value &data, IPC_Printer_TpurseLoad_t *p);		 
		
	// Top Up Reversal receipt formatting methods
	void populateTopUpRevPlaceHolder(Json::Value &data, IPC_Reversal_TpurseLoad_t *p); 
				
	// Driver shift Report formatting 
	void populateDriverShiftPlaceHolder( Json::Value &data,  IPC_DriverShiftReport_t *driverShiftData ); 
	void populateDriverShiftBodyPlaceHolder(std::string& dataStr, IPC_DriverShiftReport_t *driverShiftData);

		// Standard string formatting and placeholders replacement functions
        void populateCompanyHolders(std::string &dataString, IPC_Company_Details_t *pCompanyData);  
        void populateCommonHolders(std::string &dataString, IPC_Common_Details_t *pCommonData); 
		
		// Printing function
        void render(Json::Value &data); 
        JSONParser  *m_jsonParser;
};

      
				

#endif
