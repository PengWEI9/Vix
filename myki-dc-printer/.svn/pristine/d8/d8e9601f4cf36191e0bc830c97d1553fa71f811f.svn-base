#include <string>
#include <fstream>
#include "jsonParser.h"
#include <json/json.h>
#include <cs.h>
#include <string.h>

time_t isoStrToTime(const std::string &timeStr);
//using namespace std;
JSONParser::JSONParser(char *JSONFilePath)
{
    // parse file , ignoring comments inside the json file
    std::ifstream receiptsData(JSONFilePath, std::ifstream::binary);

    bool parsingSuccessful = m_jsonTemplate.parse( receiptsData, root, false);
    if ( !parsingSuccessful )
    {
        // report to the user the failure and their locations in the document.
        CsErrx("JSONParser::JSONParser Failed to parse Receipt.json file."); 
    }
}

/*==========================================================================*
 **
 **  getJasonParser
 **
 **  Description     :
 **      constructor Get new Json parser for new IPC message format 
 **      
 **  Parameters      :
 **      string data, is Json message receiving form DC through IPC   
 **
 **  Returns         :
 **      None
 **
 **  Notes           :
 **
 **==========================================================================*/
JSONParser::JSONParser(std::string data)
{
    // parse file , ignoring comments inside the json file

    bool parsingSuccessful = m_jsonTemplate.parse(data,root_newMsgFormat, false);
    if ( !parsingSuccessful )
    {
        // report to the user the failure and their locations in the document.
        CsErrx("JSONParser::JSONParser Failed to parse IPC Json msg for non-transitSale "); 
    }
}


JSONParser::~JSONParser()
{

}

const Json::Value JSONParser::getData_LoadStruct(printer_NonTransit_t &printer_NonTransit)
{
    // printer_NonTransit_t printer_NonTransit;
    Json::Value data;   // will contain the root value after parsing.
    data = root_newMsgFormat["data"];			
    Json::Value::Members lines = data.getMemberNames();

    //Manually fill the transaction DateTime
    // printer_NonTransit.commonData.transactionDate = time(0);

    //take Json value and store it in the old data struct
    for ( unsigned int index = 0; index < lines.size(); index++ )
    {
        std::string memberName = lines[index];
        if(root_newMsgFormat["data"][memberName].isInt())
        {
            if(memberName.compare("TerminalId") == 0)
                printer_NonTransit.commonData.terminalID = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("ShiftNumber") == 0)
                printer_NonTransit.commonData.shiftNumber = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("saleseqno") == 0)
                printer_NonTransit.commonData.transactionNumber = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("RecieptInvoiceThreshold") == 0)
                printer_NonTransit.receiptInvoiceThreshold = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("remvalue") == 0)
                printer_NonTransit.amountNewBalance = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("amountpaid") == 0)
                printer_NonTransit.amountTotal = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("amountgst") == 0)
                printer_NonTransit.amountGst = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("amountrounding") == 0)
                printer_NonTransit.amountRounding = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("amountpaid") == 0)
                printer_NonTransit.amountPaid = root_newMsgFormat["data"][memberName].asInt();
            else if(memberName.compare("amounttotal") == 0)
                printer_NonTransit.amountTotalBeforeRounding = root_newMsgFormat["data"][memberName].asInt();
        }
        else if(root_newMsgFormat["data"][memberName].isString())
        {
            if(memberName.compare("CompanyPhone") == 0)
                strcpy(printer_NonTransit.companyData.companyPhone,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("CompanyName") == 0)
                strcpy(printer_NonTransit.companyData.companyName,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("CompanyABN")== 0)
                strcpy(printer_NonTransit.companyData.companyABN,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("CompanyWebSite") == 0)
                strcpy(printer_NonTransit.companyData.companyWebSite,root_newMsgFormat["data"][memberName].asString().c_str());

            else if(memberName.compare("BusId") == 0)
                strcpy(printer_NonTransit.commonData.busID,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("Location") == 0)
                strcpy(printer_NonTransit.commonData.location,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("SalesMessage") == 0)
                strcpy(printer_NonTransit.commonData.salesMessage,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("cardnumber") == 0)
                strcpy(printer_NonTransit.commonData.mykiReference,root_newMsgFormat["data"][memberName].asString().c_str());
            else if(memberName.compare("timestamp") == 0){
                time_t transactionDate = isoStrToTime(root_newMsgFormat["data"][memberName].asString());
                printer_NonTransit.commonData.transactionDate = transactionDate;
            }
        }
        else
        {
            CsErrx("There is an ERROR when parsing reveiced new IPC Json message"); 
        }

    }
    return data;
}
const Json::Value JSONParser::getTitle(const receipt_e &receipt)
{

    Json::Value receiptTitle;   // will contain the root value after parsing.

    switch(receipt)
    {
    case TaxInvoice:
        receiptTitle = root["Receipts"]["TaxInvoice"]["Title"];			
        break;
    case Surcharge:
        receiptTitle = root["Receipts"]["Surcharge"]["Title"];
        break;
    case Reversal:
        receiptTitle = root["Receipts"]["Reversal"]["Title"];
        break;
    case Paper:
        receiptTitle = root["Receipts"]["Paper"]["Title"];
        break;
    case TopUp:
        receiptTitle = root["Receipts"]["TopUp"]["Title"];			

        break;
    case NonTransit:
        receiptTitle = root["Receipts"]["NonTransit"]["Title"];			
        break;
    case DriverShift:
        receiptTitle = root["Receipts"]["ShiftReport"]["Title"];
        break;
    default:
        CsWarnx("JSONParser::getTitle Unknown type");
        break;
    }
    return receiptTitle;
}

const Json::Value JSONParser::getHeader(const receipt_e &receipt)
{

    Json::Value receiptHeader;   // will contains the root value after parsing.

    switch(receipt)
    {
    case DriverShift:
        receiptHeader = root["Receipts"]["ShiftReport"]["Header"];
        break;
    default:
        receiptHeader = root["Receipts"]["GeneralHeader"];
        break;
    }
    return receiptHeader;
}

const Json::Value JSONParser::getCartItems()
{

    Json::Value cartItems;   // will contains the root value after parsing.
    // cartItems = root_newMsgFormat["data"]["cartitems"];
    cartItems = root_newMsgFormat["data"];

    return cartItems;
}

const Json::Value JSONParser::getNewMsgFormatJason()
{
    return root_newMsgFormat;
}

const Json::Value JSONParser::getBody(const receipt_e &receipt)
{

    Json::Value receiptBody;   // will contains the root value after parsing.

    switch(receipt)
    {
    case TaxInvoice:
        receiptBody = root["Receipts"]["TaxInvoice"]["Body"];
        break;
    case Surcharge:
        receiptBody = root["Receipts"]["Surcharge"]["Body"];
        break;
    case Reversal:
        receiptBody = root["Receipts"]["Reversal"]["Body"];
        break;
    case Paper:
        receiptBody = root["Receipts"]["Paper"]["Body"];
        break;
    case TopUp:
        receiptBody = root["Receipts"]["TopUp"]["Body"];
        break;
    case NonTransit:
        receiptBody = root["Receipts"]["NonTransit"]["Body"];			
        break;
    case DriverShift:
        receiptBody = root["Receipts"]["ShiftReport"]["Body"];
        break;
    default:
        CsWarnx("JSONParser::getBody Unknown type");
        break;
    }

    return receiptBody;
}


const Json::Value JSONParser::getFooter(const receipt_e &receipt)
{

    Json::Value receiptFooter;   // will contains the root value after parsing.

    switch(receipt)
    {
    case DriverShift:
        receiptFooter = root["Receipts"]["ShiftReport"]["Footer"];
        break;
    default:
        receiptFooter = root["Receipts"]["GeneralFooter"];
        break;
    }
    return receiptFooter;
}

time_t isoStrToTime(const std::string &timeStr)
{
    struct tm t;

    if (sscanf(timeStr.c_str(), "%d-%d-%dT%d:%d:%d+%*d:00",

                &(t.tm_year),

                &(t.tm_mon),

                &(t.tm_mday),

                &(t.tm_hour),

                &(t.tm_min),

                &(t.tm_sec)) != 6)
    {
        return -1;
    }

    // adjust values to match 'struct tm' spec
        t.tm_year -= 1900;
    t.tm_mon -= 1;

    time_t tmp = mktime(&t);
    std::cout << "isoStrToTime: tmp: " << tmp <<std::endl;
    return tmp;
}
