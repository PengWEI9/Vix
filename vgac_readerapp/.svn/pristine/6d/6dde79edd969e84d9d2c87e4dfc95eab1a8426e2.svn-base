/* -*- mode: c; tabs: 4; -*- */
/*=============================================================================
**
**    Vix Technology                   Licensed software
**    (C) 2014                         All rights reserved
**
**=============================================================================
**
**  Project/Product : MBU
**  Filename        : common.cpp
**  Author(s)       : ???
**
**
**  Description     :
**
**
**  Member(s)       :
**      getDateTime             [public]    converts date/time string to time_t
**      getDateC19              [public]    converts date/time string to DateC19_t
**
**      ParseDateTimeString     [private]   parses date/time string
**
**  Information     :
**   Compiler(s)    : C
**   Target(s)      : Independent
**
**  Subversion      :
**      $Id: $
**      $HeadURL: $
**
**  History         :
**   Vers.  Date        Aut.  Type     Description
**   -----  ----------  ----  -------  ----------------------------------------
**    1.00  ??.??.??    ???   Create
**    1.01  16.07.14    ANT   Modify   Rectified parsing date/time string.
**
**===========================================================================*/

/*
 *      Includes
 *      ========
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "datec19.h"
#include "Common.h"
#include "cs.h"

/*
 *      Local Prototypes
 *      ================
 */

static int ParseDateTimeString( struct tm *pTm, const char *d );

time_t getDateTime( const char * d )
{
    struct tm       timeinfo;

    ParseDateTimeString( &timeinfo, d );

    return (  mktime(&timeinfo) );
}   /*  getDateTime( ) */

DateC19_t getDateC19(const char * d)
{
    struct tm timeinfo;

    sscanf(d, "%d:%d:%d:%d:%d:%d", &timeinfo.tm_year, &timeinfo.tm_mon, &timeinfo.tm_mday, &timeinfo.tm_hour, &timeinfo.tm_min, &timeinfo.tm_sec);

    return (mkdate(&timeinfo));
}

/*==========================================================================*
**
**  ParseDateTimeString
**
**  Description     :
**      Parses the date/time string.
**
**  Parameters      :
**      pTm                 [O]     returned tm structure
**      d                   [I]     date/time string to parse
**
**  Returns         :
**      xx                          number of fields found
**
**  Notes           :
**      Input date/time string can have one of the following formats,
**
**      YYYY:MM:DD:hh:mm:ss
**      hh:mm:ss
**
**==========================================================================*/

static int ParseDateTimeString( struct tm *pTm, const char *d )
{
#define __HHMMSS                3
#define __YYYYMMDD_HHMMSS       6

    time_t          now;
    char            dateTimeString[ 32 ];
    char           *pString     = NULL;
    int             nFieldValues[ __YYYYMMDD_HHMMSS ];
    int             nFields     = 0;

    if ( pTm != NULL )
    {
        time( &now );
        localtime_r( &now, pTm );

        if ( d != NULL )
        {
            memset( dateTimeString, 0, sizeof( dateTimeString ) );
            strncpy( dateTimeString, d, sizeof( dateTimeString ) - 1 );
            pString = strtok( dateTimeString, ":" );
            while ( nFields < __YYYYMMDD_HHMMSS && pString != NULL )
            {
                nFieldValues[ nFields++ ]   = atoi( pString );
                pString                     = strtok( NULL, ":" );
            }   /*  end-of-while */

            switch ( nFields )
            {
            case __YYYYMMDD_HHMMSS:
                pTm->tm_year    = nFieldValues[ 0 ] - 1900;
                pTm->tm_mon     = nFieldValues[ 1 ] - 1;
                pTm->tm_mday    = nFieldValues[ 2 ];
                pTm->tm_hour    = nFieldValues[ 3 ];
                pTm->tm_min     = nFieldValues[ 4 ];
                pTm->tm_sec     = nFieldValues[ 5 ];
                break;

            case __HHMMSS:
                pTm->tm_hour    = nFieldValues[ 0 ];
                pTm->tm_min     = nFieldValues[ 1 ];
                pTm->tm_sec     = nFieldValues[ 2 ];
                break;

            default:
                /*  Que!? */
                nFields         = 0;
                break;
            }   /*  end-of-if */
            pTm->tm_isdst       = -1;
        }   /*  end-of-if */
    }   /*  end-of-if */
    return nFields;
}   /*  ParseDateTimeString( ) */
